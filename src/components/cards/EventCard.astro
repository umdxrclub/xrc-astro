---
type Props = {
  event: Event;
};

import Group from "../../layouts/Group.astro";
import type { Event } from "../../types/PayloadSchema";
import MediaCard from "./MediaCard.astro";
import lab from "../../assets/img/lab.jpg";

const { event } = Astro.props;

let dateFormatter = Intl.DateTimeFormat("en-us", {
  dateStyle: "long",
});

let timeFormatter = Intl.DateTimeFormat("en-us", {
  timeStyle: "short",
});

let startDate = new Date(event.startDate);
let endDate = new Date(event.endDate);

let dateStr = dateFormatter.format(startDate);

let startTime = timeFormatter.format(startDate);
let endTime = timeFormatter.format(endDate);

let timeStr = `${startTime} - ${endTime}`;
let dateTimeStr = `${dateStr} | ${timeStr}`;

let irl = event.location?.irl;
let online = event.location?.online;
---

<MediaCard inferSize={!!event.thumbnail} src={event.thumbnail ?? lab} alt=`Thumbnail for ${event.name}`>
  <Group direction="column">
    <Group flex gap="0.25rem">
      <h3 class="event-name">{event.name}</h1>
      <h5>{dateTimeStr}</h5>
      {
        irl ? (
          <div class="location">
            <h5>In Person: {irl}</h5>

          </div>
        ) : null
      }
      {
        online ? (
          <div class="location">
            <h5>Online: {online}</h5>

          </div>
        ) : null
      }
    </Group>
    <p>{event.description}</p>
  </Group>
</MediaCard>
<style>
  .event {
    width: 100%;
    align-self: start;
  }

  .event-name {
    color: var(--xr-primary);
  }

  .event-description {
    padding: 1.5rem;
  }

  img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }

  .img-container {
    align-self: center;
    width: 100%;
    overflow: hidden;
    aspect-ratio: 16/9;
    border-top: 0;
    border-left: 0;
    border-right: 0;
    border-bottom: 0.1rem;
    border-style: solid;
    border-color: var(--xr-primary);
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    margin: 0;
    text-align: left !important;
  }

  h5 {
    font-weight: 500;
  }

  h2 {
    width: 100%;
    text-overflow: ellipsis;
    white-space: no-wrap;
    overflow: hidden;
  }

  p {
    text-overflow: ellipsis;
    white-space: no-wrap;
    overflow: hidden;
  }

  .location {
    display: flex;
    gap: 0.3rem;
    flex-wrap: wrap;
  }

</style>
